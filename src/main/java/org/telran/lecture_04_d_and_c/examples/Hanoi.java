package org.telran.lecture_04_d_and_c.examples;

public class Hanoi {

    /**
     * Решение классической задачи "Ханойские башни" с использованием рекурсии.
     *
     * Алгоритм перемещает стопку дисков разного размера с одного стержня на другой,
     * соблюдая следующие правила:
     * 1. За один ход можно перемещать только один диск.
     * 2. Нельзя класть больший диск на меньший.
     * 3. Можно использовать дополнительный (вспомогательный) стержень.
     *
     * Общий принцип решения:
     * - Для перемещения n дисков мы сначала перемещаем (n-1) верхних дисков на вспомогательный стержень
     * - Затем перемещаем самый большой (нижний) диск на целевой стержень
     * - После этого перемещаем (n-1) дисков с вспомогательного стержня на целевой
     *
     * Временная сложность: O(2^n), где n - количество дисков
     * Пространственная сложность: O(n) из-за глубины рекурсии
     *
     * @param n количество дисков для перемещения
     * @param source символ, обозначающий исходный стержень
     * @param destination символ, обозначающий целевой стержень
     * @param helper символ, обозначающий вспомогательный стержень
     */
    public static void hanoi(int n, char source, char destination, char helper) {
        // Базовый случай: если перемещать нечего, завершаем выполнение
        if (n <= 0) {
            return;
        }

        // Шаг 1: Перемещаем (n-1) дисков с исходного стержня на вспомогательный
        // Целевым в данном случае становится вспомогательный, а исходный становится вспомогательным

        // Шаг 2: Перемещаем самый большой (n-й) диск с исходного стержня на целевой

        // Шаг 3: Перемещаем (n-1) дисков с вспомогательного стержня на целевой
        // Вспомогательный становится исходным, а первоначальный исходный - вспомогательным

    }

    /**
     * Пример использования алгоритма решения задачи "Ханойские башни".
     *
     * @param args аргументы командной строки (не используются)
     */
    public static void main(String[] args) {
        int numberOfDisks = 3; // Количество дисков для перемещения
        char sourceRod = 'A';  // Исходный стержень
        char targetRod = 'C';  // Целевой стержень
        char auxiliaryRod = 'B'; // Вспомогательный стержень

        System.out.println("Последовательность перемещений для " + numberOfDisks + " дисков:");
        hanoi(numberOfDisks, sourceRod, targetRod, auxiliaryRod);
    }
}