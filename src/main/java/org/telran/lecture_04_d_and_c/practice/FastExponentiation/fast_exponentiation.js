/**
 * Реализация алгоритма быстрого возведения в степень (бинарного возведения в степень).
 *
 * Алгоритм быстрого возведения в степень является эффективным методом вычисления целочисленных
 * степеней числа, использующим принцип "разделяй и властвуй". Вместо выполнения n умножений,
 * как в наивном подходе, этот алгоритм требует всего O(log n) операций умножения,
 * что значительно ускоряет процесс вычисления для больших показателей степени.
 *
 * Основная идея алгоритма базируется на следующих математических закономерностях:
 * 1. Если показатель четный: base^exponent = (base^(exponent/2))^2
 * 2. Если показатель нечетный: base^exponent = base * (base^(exponent/2))^2
 *
 * Например, чтобы вычислить 2^10:
 * - 2^10 = (2^5)^2
 * - 2^5 = 2 * (2^2)^2
 * - 2^2 = (2^1)^2
 * - 2^1 = 2 * (2^0)^2
 * - 2^0 = 1
 *
 * Таким образом, вместо 10 умножений, нам потребуется всего 4 операции умножения.
 *
 * Временная сложность: O(log n), где n - показатель степени
 * Пространственная сложность: O(log n) из-за глубины рекурсии
 */

/**
 * Рекурсивный метод для быстрого возведения в степень.
 *
 * Метод использует принцип "разделяй и властвуй", сводя задачу вычисления большой
 * степени к задаче вычисления меньшей степени, что позволяет значительно сократить
 * количество операций умножения.
 *
 * @param {number} base     основание степени (число, которое возводится в степень)
 * @param {number} exponent показатель степени (неотрицательное целое число)
 * @return {number} значение base^exponent
 * @throws {Error} если результат превышает диапазон типа number
 */
export function fastExponentiation(base, exponent) {
    // Базовый случай: любое число в степени 0 равно 1

    // Обработка отрицательных степеней

    // Рекурсивный случай: вычисляем half = base^(exponent/2)
    // Здесь exponent/2 выполняет целочисленное деление, округляя вниз
    // Рекурсивный шаг для положительных степеней
    // Разделение и Властвование (неявное)

    // Объединение
    // Примеры:
    // - для 2^5 мы вычисляем (2^2)^2 = 16, а затем 16 * 2 = 32
    // - для 3^7 мы вычисляем (3^3)^2 = 729, а затем 729 * 3 = 2187
}

/**
 * Главный метод для демонстрации работы алгоритма быстрого возведения в степень.
 */
function main() {
    // Пример базового использования
    const base = 2;       // Основание степени
    const exponent = 10;  // Показатель степени

    // Вызываем рекурсивную версию
    const result = fastExponentiation(base, exponent);
    console.log(`${base} в степени ${exponent} равно ${result}`);

    // Проверяем с помощью Math.pow
    const mathPowResult = Math.pow(base, exponent);
    console.log(`Результат Math.pow: ${mathPowResult}`);

    // Примеры с разными основаниями и показателями
    console.log("\n--- Дополнительные примеры ---");
    const examples = [
        [2, -1],    // 2^-1 = 0.5
        [2, 0],     // 2^0 = 1
        [2, 1],     // 2^1 = 2
        [3, 4],     // 3^4 = 81
        [5, 3],     // 5^3 = 125
        [10, 9]     // 10^9 = 1_000_000_000
    ];

    examples.forEach(([b, e]) => {
        const res = fastExponentiation(b, e);
        console.log(`${b}^${e} = ${res}`);
    });
}

// Запуск основной функции
main();
