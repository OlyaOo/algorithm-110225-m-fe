import { findMaxSubarraySum } from './maximum_subarray_sum.js';
import { logTestCase, logTestCaseWithException } from '../../../../../utils/common_util.js';

// findMaxSubarraySum
function testFindMaxSubarraySum() {
  console.log("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findMaxSubarraySum:");

  // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
  logTestCase(
    "–ú–∞—Å—Å–∏–≤ [-2, 1, -3, 4, -1, 2, 1, -5, 4], –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 6",
    findMaxSubarraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 0, 8),
    6
  );

  // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
  logTestCase(
    "–ú–∞—Å—Å–∏–≤ [-5, -3, -1, -2, -9], –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ -1",
    findMaxSubarraySum([-5, -3, -1, -2, -9], 0, 4),
    -1
  );

  // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
  logTestCase(
    "–ú–∞—Å—Å–∏–≤ [5], –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 5",
    findMaxSubarraySum([5], 0, 0),
    5
  );

  // –¢–µ—Å—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  logTestCaseWithException(
    "–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤",
    () => findMaxSubarraySum([], 0, -1),
    "Array is empty"
  );

  // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  logTestCase(
    "–ú–∞—Å—Å–∏–≤ [2, 2, 2, 2], –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 8",
    findMaxSubarraySum([2, 2, 2, 2], 0, 3),
    8
  );

  console.log();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFindMaxSubarraySum();
