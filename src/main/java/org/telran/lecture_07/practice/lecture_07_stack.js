/**
 * Класс, представляющий структуру данных стек, реализованную на основе массива.
 * Элементы добавляются и удаляются с вершины стека (LIFO - Last In, First Out).
 */
class ArrayStack {
    /**
     * Создает экземпляр ArrayStack.
     * Инициализирует пустой массив для хранения элементов стека.
     */
    constructor() {
        // TODO: Инициализировать пустой массив для хранения элементов стека
    }

    /**
     * Добавляет элемент на вершину стека.
     * @param {*} element - Элемент, который нужно добавить в стек.
     */
    push(element) {
        // TODO: Добавить элемент в конец массива
        // TODO: Вывести сообщение в консоль, что элемент добавлен, например: "Добавлено: <element>"
    }

    /**
     * Удаляет и возвращает верхний элемент стека.
     * @returns {*} Удаленный элемент или null, если стек пуст.
     */
    pop() {
        // TODO: Проверить, пуст ли стек; если да, вывести в консоль "Стек пуст" и вернуть null
        // TODO: Удалить и сохранить последний элемент массива
        // TODO: Вывести сообщение в консоль, что элемент удален, например: "Удалено: <element>"
        // TODO: Вернуть удаленный элемент
    }

    /**
     * Возвращает верхний элемент стека без его удаления.
     * @returns {*} Верхний элемент стека или null, если стек пуст.
     */
    peek() {
        // TODO: Проверить, пуст ли стек; если да, вернуть null
        // TODO: Вернуть последний элемент массива без его удаления
    }

    /**
     * Проверяет, пуст ли стек.
     * @returns {boolean} True, если стек пуст, иначе false.
     */
    isEmpty() {
        // TODO: Вернуть true, если длина массива равна 0, иначе false
    }

    /**
     * Возвращает текущий размер стека.
     * @returns {number} Количество элементов в стеке.
     */
    size() {
        // TODO: Вернуть длину массива
    }

    /**
     * Очищает стек, удаляя все элементы.
     */
    clear() {
        // TODO: Очистить массив, установив его в пустой массив
        // TODO: Вывести сообщение в консоль: "Стек очищен"
    }

    /**
     * Выполняет указанную функцию для каждого элемента стека, начиная с вершины.
     * @param {function} callback - Функция, которая будет вызвана для каждого элемента. Принимает элемент и индекс (от вершины).
     */
    forEach(callback) {
        // TODO: Пройтись по массиву с конца (вершина) к началу (основание)
        // TODO: Для каждого элемента вызвать callback, передав элемент и индекс (индекс должен начинаться с 0 для вершины)
    }
}

/**
 * Класс, представляющий текстовый редактор с поддержкой операций вставки текста, отмены (undo) и повтора (redo).
 * Использует два стека для хранения состояний для операций отмены и повтора.
 */
class TextEditor {
    /**
     * Создает экземпляр TextEditor.
     * Инициализирует пустое содержимое и стеки для операций undo и redo.
     */
    constructor() {
        // TODO: Инициализировать пустую строку для хранения содержимого (content)
        // TODO: Инициализировать стек для операций отмены (undoStack) с использованием класса Stack
        // TODO: Инициализировать стек для операций повтора (redoStack) с использованием класса Stack
    }

    /**
     * Выполняет команду, сохраняя текущее состояние в стеке undo.
     * @param {function} command - Функция, представляющая команду для выполнения (например, вставка текста).
     */
    executeCommand(command) {
        // TODO: Сохранить текущее состояние (объект с полем content) в undoStack
        // TODO: Очистить redoStack
        // TODO: Выполнить переданную команду
    }

    /**
     * Вставляет текст в конец текущего содержимого.
     * @param {string} text - Текст для вставки.
     */
    insertText(text) {
        // TODO: Вызвать executeCommand, передав функцию, которая добавляет text к текущему содержимому (content)
    }

    /**
     * Отменяет последнюю операцию, восстанавливая предыдущее состояние.
     * @returns {boolean} True, если отмена успешна, иначе false (если стек undo пуст).
     */
    undo() {
        // TODO: Проверить, пуст ли undoStack; если да, вернуть false
        // TODO: Сохранить текущее состояние (объект с полем content) в redoStack
        // TODO: Извлечь предыдущее состояние из undoStack
        // TODO: Установить содержимое (content) равным содержимому извлеченного состояния
        // TODO: Вернуть true
    }

    /**
     * Повторяет последнюю отмененную операцию, восстанавливая следующее состояние.
     * @returns {boolean} True, если повтор успешен, иначе false (если стек redo пуст).
     */
    redo() {
        // TODO: Проверить, пуст ли redoStack; если да, вернуть false
        // TODO: Сохранить текущее состояние (объект с полем content) в undoStack
        // TODO: Извлечь следующее состояние из redoStack
        // TODO: Установить содержимое (content) равным содержимому извлеченного состояния
        // TODO: Вернуть true
    }

    /**
     * Возвращает текущее содержимое редактора.
     * @returns {string} Текущее содержимое редактора.
     */
    getContent() {
        // TODO: Вернуть текущее содержимое (content)
    }
}