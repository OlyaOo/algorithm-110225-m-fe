/**
 * АЛГОРИТМ БЫСТРОЙ СОРТИРОВКИ (QuickSort)
 *
 * Принцип работы:
 * 1. Выбирается опорный элемент (pivot)
 * 2. Остальные элементы распределяются в два массива:
 *    - Меньшие опорного (less)
 *    - Большие или равные опорному (greater)
 * 3. Рекурсивно сортируются обе части
 * 4. Объединяется результат: sorted(less) + pivot + sorted(greater)
 */

/**
 * Разделяет массив на элементы меньше и больше/равные опорному.
 *
 * @param {Array} arr - Массив, который нужно разделить.
 * @returns {{ pivot: any, less: Array, greater: Array }}
 * Объект с полями: опорный элемент, массивы меньше и больше/равные.
 */
export function partition(arr) {
    // TODO: реализовать выбор pivot, проход по массиву и формирование less и greater
}

/**
 * Выполняет сортировку массива с помощью базового QuickSort.
 *
 * @param {Array} arr - Массив для сортировки.
 * @returns {Array} Отсортированный массив.
 */
export function quickSort(arr) {
    // TODO:
    // - Если длина массива <= 1, вернуть его как есть.
    // - Иначе выполнить partition.
    // - Рекурсивно отсортировать less и greater.
    // - Вернуть объединённый результат.
}


/**
 * Обменивает два элемента массива местами.
 *
 * @param {any[]} arr - Массив, в котором производится обмен.
 * @param {number} i - Индекс первого элемента.
 * @param {number} j - Индекс второго элемента.
 */
export function swap(arr, i, j) {
    // Обменяй значения arr[i] и arr[j] местами.
    // Подсказка: можно использовать временную переменную.
}

/**
 * Разделяет массив по алгоритму Хоара.
 *
 * @param {any[]} arr - Массив, который нужно разделить.
 * @param {number} low - Левая граница подмассива.
 * @param {number} high - Правая граница подмассива.
 * @param {(a: any, b: any) => number} compareFn - Функция сравнения, аналогичная той, что используется в Array.prototype.sort().
 * @returns {number} Индекс, разделяющий две части массива.
 */
export function hoarePartition(arr, low, high, compareFn) {
    // 1. Выбери опорный элемент (pivot), например, элемент в середине массива.
    // 2. Установи два указателя: i — в начало (low), j — в конец (high).
    // 3. Пока true:
    //    - сдвигай i вправо, пока arr[i] < pivot (используя compareFn)
    //    - сдвигай j влево, пока arr[j] > pivot
    //    - если i >= j, верни j — это граница разбиения
    //    - иначе, обменяй arr[i] и arr[j], затем увеличь i и уменьши j
}

/**
 * Быстрая сортировка с использованием разбиения Хоара.
 *
 * @param {any[]} arr - Массив для сортировки.
 * @param {number} low - Левая граница.
 * @param {number} high - Правая граница.
 */
export function quickSortHoare(arr, low, high) {
    // TODO:
    // - Проверить условие выхода (low < high)
    // - Выполнить hoarePartition и получить pivot
    // - Рекурсивно вызвать quickSortHoare для левой и правой части
}

/**
 * Быстро находит k-й наименьший элемент в массиве, используя QuickSelect.
 *
 * @param {any[]} arr - Массив, в котором происходит поиск.
 * @param {number} k - Индекс (0-based) нужного наименьшего элемента.
 * @param {number} [low=0] - Левая граница подмассива.
 * @param {number} [high=arr.length - 1] - Правая граница подмассива.
 * @param {(a: any, b: any) => number} compareFn - Функция сравнения.
 * @returns {any} k-й наименьший элемент в массиве.
 */
export function quickSelect(arr, k, low = 0, high = arr.length - 1, compareFn) {
    // 1. Базовый случай: если подмассив состоит из одного элемента, верни его.
    // 2. Раздели массив с помощью hoarePartition.
    // 3. Если k ≤ индекс разделения, рекурсивно вызови quickSelect на левой части.
    //    Иначе — на правой части.
}



// =================================================================
// ПРИМЕР: Нахождение топ-N самых популярных статей
// =================================================================
const articles = [
  { title: "Статья A", views: 1500 },
  { title: "Статья B", views: 900 },
  { title: "Статья C", views: 4500 },
  { title: "Статья D", views: 500 },
  { title: "Статья E", views: 3100 },
  { title: "Статья F", views: 1800 },
  { title: "Статья G", views: 4000 },
];

/**
 * Находит топ-N самых популярных статей по количеству просмотров.
 * 
 * Алгоритм:
 * 1. Если количество статей больше N:
 *    - Используем QuickSelect для нахождения пороговой статьи (threshold).
 *    - Отбираем статьи, у которых просмотров ≥ threshold.
 *    - Сортируем отобранные статьи.
 * 2. Если статей меньше или равно N:
 *    - Сортируем весь массив по убыванию просмотров.
 *
 * @param {Array<Object>} articles - Массив статей, каждая из которых содержит поле `views`.
 * @param {number} [topN=5] - Количество статей с наибольшим количеством просмотров.
 * @returns {Array<Object>} Массив топ-N самых просматриваемых статей.
 */
export function finderTopNArticles(articles, topN = 5) {
  // 1. Скопировать массив, чтобы не изменять оригинал

  // 2. Определить функцию сравнения по просмотрам

  // 3. Если статей больше N:
  //    3.1 Найти индекс (длину - N)
  //    3.2 Получить пороговую статью через quickSelect
  //    3.3 Определить пороговое значение просмотров
  //    3.4 Отфильтровать статьи, у которых просмотры ≥ порога
  //    3.5 Отсортировать результат и вернуть

  // 4. Если статей меньше или равно N:
  //    4.1 Отсортировать весь массив по убыванию просмотров и вернуть
}



// =================================================================
// ПРИМЕР: Разделение товаров по цене
// =================================================================

const products = [
    { name: 'Laptop', price: 1200, category: 'Electronics' },
    { name: 'Mouse', price: 25, category: 'Electronics' },
    { name: 'Keyboard', price: 80, category: 'Electronics' },
    { name: 'Monitor', price: 300, category: 'Electronics' },
    { name: 'Headphones', price: 150, category: 'Electronics' },
    { name: 'Webcam', price: 90, category: 'Electronics' },
    { name: 'Speaker', price: 200, category: 'Electronics' }
];

// =================================================================
// ПРИМЕР: Нахождение топ-N самых больших файлов
// =================================================================

const files = [
    { name: 'app.js', size: 245000, type: 'javascript' },
    { name: 'styles.css', size: 85000, type: 'css' },
    { name: 'vendor.js', size: 1200000, type: 'javascript' },
    { name: 'image1.jpg', size: 450000, type: 'image' },
    { name: 'font.woff2', size: 25000, type: 'font' },
    { name: 'data.json', size: 150000, type: 'data' },
    { name: 'bundle.js', size: 800000, type: 'javascript' }
];